#!/sbin/openrc-run
# Adapted for OpenRC from upstream sysvinit script

depend() {
	need net
	use dns logger netmount
}

exists() {
	which "$1" >/dev/null 2>/dev/null
}

existf() {
	type "$1" >/dev/null 2>/dev/null
}

on_off_function() {
	# $1 : function name on
	# $2 : function name off
	# $3 : 0 - off, 1 - on
	local F="$1"
	[ "$3" = "1" ] || F="$2"
	shift
	shift
	shift
	"$F" "$@"
}

ipt() {
	iptables -C "$@" >/dev/null 2>/dev/null || iptables -I "$@"
}

ipt_del() {
	iptables -C "$@" >/dev/null 2>/dev/null && iptables -D "$@"
}

ipt_add_del() {
	on_off_function ipt ipt_del "$@"
}

ipt6() {
	ip6tables -C "$@" >/dev/null 2>/dev/null || ip6tables -I "$@"
}

ipt6_del() {
	ip6tables -C "$@" >/dev/null 2>/dev/null && ip6tables -D "$@"
}

ipt6_add_del() {
	on_off_function ipt6 ipt6_del "$@"
}

# there's no route_localnet for ipv6
# the best we can is to route to link local of the incoming interface
# OUTPUT - can DNAT to ::1
# PREROUTING - can't DNAT to ::1. can DNAT to link local of -i interface or to any global addr
# not a good idea to expose tpws to the world (bind to ::)

get_ipv6_linklocal() {
	# $1 - interface name. if empty - any interface
	local dev
	[ -n "$1" ] && dev="dev $1"
	ip addr show $dev | sed -e 's/^.*inet6 \([^ ]*\)\/[0-9]* scope link.*$/\1/;t;d' | head -n 1
}

get_ipv6_global() {
	# $1 - interface name. if empty - any interface
	local dev
	[ -n "$1" ] && dev="dev $1"
	ip addr show $dev | sed -e 's/^.*inet6 \([^ ]*\)\/[0-9]* scope global.*$/\1/;t;d' | head -n 1
}

iface_is_up() {
	# $1 - interface name
	[ -f /sys/class/net/$1/operstate ] || return
	local state
	read state </sys/class/net/$1/operstate
	[ "$state" != "down" ]
}

wait_ifup() {
	# $1 - interface name
	local ct=0
	while
		iface_is_up $1 && return
		[ "$ct" -ge "$IFUP_WAIT_SEC" ] && break
		waiting for ifup of $1 for another $(($IFUP_WAIT_SEC - $ct)) seconds ...
		ct=$(($ct+1))
		sleep 1
	do :; done
	false
}

dnat6_target() {
	# $1 - lan network name
	# $2 - var to store target ip6
	# get target ip address for DNAT. prefer link locals
	# tpws should be as inaccessible from outside as possible
	# link local address can appear not immediately after ifup
	# DNAT6_TARGET=- means attempt was made but address was not found (to avoid multiple re-attempts)

	local DNAT6_TARGET DVAR=DNAT6_TARGET_$1
	DVAR=$(echo $DVAR | sed 's/[^a-zA-Z0-9_]/_/g')
	eval DNAT6_TARGET="\$$DVAR"
	[ -n "$2" ] && eval $2=''
	[ -n "$DNAT6_TARGET" ] || {
		local ct=0
		while
			DNAT6_TARGET=$(get_ipv6_linklocal $1)
			[ -n "$DNAT6_TARGET" ] && break
			[ "$ct" -ge "$LINKLOCAL_WAIT_SEC" ] && break
			echo $1: waiting for the link local for another $(($LINKLOCAL_WAIT_SEC - $ct)) seconds ...
			ct=$(($ct+1))
			sleep 1
		do :; done

		[ -n "$DNAT6_TARGET" ] || {
		    	echo $1: no link local. getting global
			DNAT6_TARGET=$(get_ipv6_global $1)
			[ -n "$DNAT6_TARGET" ] || {
				echo $1: could not get any address
				DNAT6_TARGET=-
			}
		}
		eval $DVAR="$DNAT6_TARGET"
	}
	[ -n "$2" ] && eval $2="$DNAT6_TARGET"
}

prepare_tpws_fw4() {
	# otherwise linux kernel will treat 127.0.0.0/8 as "martian" ip and refuse routing to it
	# NOTE : kernels <3.6 do not have this feature. consider upgrading or change DNAT to REDIRECT and do not bind to 127.0.0.0/8
	[ -n "$IFACE_LAN" ] && {
		iptables -N input_rule_zapret 2>/dev/null
		iptables -F input_rule_zapret
		iptables -A input_rule_zapret -d $TPWS_LOCALHOST4 -j RETURN
		iptables -A input_rule_zapret -d 127.0.0.0/8 -j DROP
		for lan in $IFACE_LAN ; do
			ipt INPUT -i $lan -j input_rule_zapret
			sysctl -qw net.ipv4.conf.$lan.route_localnet=1
		done
	}
}

unprepare_tpws_fw4() {
	if [ -n "$IFACE_LAN" ]; then
		for lan in $IFACE_LAN ; do
			ipt_del INPUT -i $lan -j input_rule_zapret
			sysctl -qw net.ipv4.conf.$lan.route_localnet=0
		done
		iptables -F input_rule_zapret 2>/dev/null
		iptables -X input_rule_zapret 2>/dev/null
	fi
}

unprepare_tpws_fw() {
	unprepare_tpws_fw4
}

print_op() {
	if [ "$1" = "1" ]; then
		echo "Adding ip$4tables rule for $3 : $2"
	else
		echo "Deleting ip$4tables rule for $3 : $2"
	fi
}

fw_tpws4() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv4
	# $3 - tpws port
	[ "$DISABLE_IPV4" = "1" ] || {
		[ "$1" = 1 ] && prepare_tpws_fw4
		print_op $1 "$2" "tpws (port $3)"
		for lan in $IFACE_LAN ; do
			ipt_add_del $1 PREROUTING -t nat -i $lan -p tcp $2 $IPSET_EXCLUDE dst -j DNAT --to $TPWS_LOCALHOST4:$3
	 	done
		if [ -n "$IFACE_WAN" ]; then
			for wan in $IFACE_WAN; do
				ipt_add_del $1 OUTPUT -t nat -o $wan -m owner ! --uid-owner $WS_USER -p tcp $2 $IPSET_EXCLUDE dst -j DNAT --to $TPWS_LOCALHOST4:$3
			done
		else
			ipt_add_del $1 OUTPUT -t nat -m owner ! --uid-owner $WS_USER -p tcp $2 $IPSET_EXCLUDE dst -j DNAT --to $TPWS_LOCALHOST4:$3
		fi
	}
}

fw_tpws6() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv6
	# $3 - tpws port
	[ "$DISABLE_IPV6" = "1" ] || {
		print_op $1 "$2" "tpws (port $3)" 6
		local DNAT6
		for lan in $IFACE_LAN ; do
			dnat6_target $lan DNAT6
			[ "$DNAT6" != "-" ] && ipt6_add_del $1 PREROUTING -t nat -i $lan -p tcp $2 $IPSET_EXCLUDE6 dst -j DNAT --to [$DNAT6]:$3
	 	done
		if [ -n "$IFACE_WAN" ]; then
			for wan in $IFACE_WAN; do
				ipt6_add_del $1 OUTPUT -t nat -o $wan -m owner ! --uid-owner $WS_USER -p tcp $2 $IPSET_EXCLUDE6 dst -j DNAT --to [::1]:$3
			done
		else
			ipt6_add_del $1 OUTPUT -t nat -m owner ! --uid-owner $WS_USER -p tcp $2 $IPSET_EXCLUDE6 dst -j DNAT --to [::1]:$3
		fi
	}
}

fw_tpws() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv4
	# $3 - iptable filter for ipv6
	# $4 - tpws port
	fw_tpws4 $1 "$2" $4
	fw_tpws6 $1 "$3" $4
}

fw_nfqws_pre4() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv4
	# $3 - queue number
	[ "$DISABLE_IPV4" = "1" ] || {
		print_op $1 "$2" "nfqws prerouting (qnum $3)"
		if [ -n "$IFACE_WAN" ]; then
			for wan in $IFACE_WAN; do
				ipt_add_del $1 PREROUTING -t mangle -i $wan -p tcp $2 $IPSET_EXCLUDE src -j NFQUEUE --queue-num $3 --queue-bypass
			done
		else
				ipt_add_del $1 PREROUTING -t mangle -p tcp $2 $IPSET_EXCLUDE src -j NFQUEUE --queue-num $3 --queue-bypass
		fi
	}
}

fw_nfqws_pre6() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv6
	# $3 - queue number
	[ "$DISABLE_IPV6" = "1" ] || {
		print_op $1 "$2" "nfqws prerouting (qnum $3)" 6
		if [ -n "$IFACE_WAN" ]; then
			for wan in $IFACE_WAN; do
				ipt6_add_del $1 PREROUTING -t mangle -i $wan -p tcp $2 $IPSET_EXCLUDE6 src -j NFQUEUE --queue-num $3 --queue-bypass
			done
		else
			ipt6_add_del $1 PREROUTING -t mangle -p tcp $2 $IPSET_EXCLUDE6 src -j NFQUEUE --queue-num $3 --queue-bypass
		fi
	}
}

fw_nfqws_pre() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv4
	# $3 - iptable filter for ipv6
	# $4 - queue number
	fw_nfqws_pre4 $1 "$2" $4
	fw_nfqws_pre6 $1 "$3" $4
}

fw_nfqws_post4() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv4
	# $3 - queue number
	[ "$DISABLE_IPV4" = "1" ] || {
		print_op $1 "$2" "nfqws postrouting (qnum $3)"
		if [ -n "$IFACE_WAN" ]; then
			for wan in $IFACE_WAN; do
				ipt_add_del $1 POSTROUTING -t mangle -o $wan -p tcp $2 $IPSET_EXCLUDE dst -j NFQUEUE --queue-num $3 --queue-bypass
			done
		else
			ipt_add_del $1 POSTROUTING -t mangle -p tcp $2 $IPSET_EXCLUDE dst -j NFQUEUE --queue-num $3 --queue-bypass
		fi
	}
}

fw_nfqws_post6() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv6
	# $3 - queue number
	[ "$DISABLE_IPV6" = "1" ] || {
		print_op $1 "$2" "nfqws postrouting (qnum $3)" 6
		if [ -n "$IFACE_WAN" ]; then
			for wan in $IFACE_WAN; do
				ipt6_add_del $1 POSTROUTING -t mangle -o $wan -p tcp $2 $IPSET_EXCLUDE6 dst -j NFQUEUE --queue-num $3 --queue-bypass
			done
		else
			ipt6_add_del $1 POSTROUTING -t mangle -p tcp $2 $IPSET_EXCLUDE6 dst -j NFQUEUE --queue-num $3 --queue-bypass
		fi
	}
}

fw_nfqws_post() {
	# $1 - 1 - add, 0 - del
	# $2 - iptable filter for ipv4
	# $3 - iptable filter for ipv6
	# $4 - queue number
	fw_nfqws_post4 $1 "$2" $4
	fw_nfqws_post6 $1 "$3" $4
}

run_daemon() {
	# $1 - daemon number : 1,2,3,...
	# $2 - daemon
	# $3 - daemon args
	# use $PIDDIR/$DAEMONBASE$1.pid as pidfile

	local DAEMONBASE=$(basename $2)
	local PIDFILE=$PIDDIR/$DAEMONBASE$1.pid
	ebegin "Starting daemon $1: $2 $3"
	if exists start-stop-daemon ; then
		start-stop-daemon --start --pidfile "$PIDFILE" --background --make-pidfile --exec "$2" -- $3
	else
		if [ -f "$PIDFILE" ] && pgrep -F "$PIDFILE" "$DAEMONBASE" >/dev/null; then
			echo already running
		else
			"$2" $3 >/dev/null 2>/dev/null &
			PID=$!
			if [ -n "$PID" ]; then
				echo $PID >$PIDFILE
			else
				echo could not start daemon $1 : $2 $3
				false
			fi
		fi
	fi
	eend $?
}

stop_daemon() {
	# $1 - daemon number : 1,2,3,...
	# $2 - daemon
	# use $PIDDIR/$DAEMONBASE$1.pid as pidfile
	local DAEMONBASE=$(basename $2)
	local PIDFILE=$PIDDIR/$DAEMONBASE$1.pid
	ebegin "Stopping daemon $1: $2"
	if exists start-stop-daemon ; then
		start-stop-daemon --stop --pidfile "$PIDFILE" --exec "$2"
	else
		if [ -f "$PIDFILE" ]; then
			read PID <"$PIDFILE"
			kill $PID
			rm -f "$PIDFILE"
		else
			echo no pidfile : $PIDFILE
		fi
	fi
	eend $?
}

do_daemon() {
	# $1 - 1 - run, 0 - stop
	on_off_function run_daemon stop_daemon "$@"
}

prepare_user() {
	# $WS_USER is required to prevent redirection of the traffic originating from TPWS itself
	# otherwise infinite loop will occur
	# also its good idea not to run tpws as root
	id -u $WS_USER >/dev/null 2>/dev/null || eend 1 "user $WS_USER not found!"
}

do_tpws() {
	# $1 : 1 - run, 0 - stop
	# $2 : daemon number
	# $3 : daemon args

	[ "$1" = "1" ] && prepare_user

	[ "$DISABLE_IPV4" = "1" ] && [ "$DISABLE_IPV6" = "1" ] && return 0

	local OPT="$TPWS_OPT_BASE"

	[ "$DISABLE_IPV4" = "1" ] || OPT="$OPT $TPWS_OPT_BASE4"
	[ "$DISABLE_IPV6" = "1" ] || {
		OPT="$OPT $TPWS_OPT_BASE6"
		for lan in $IFACE_LAN; do
			OPT="$OPT --bind-iface6=$lan $TPWS_OPT_BASE6_PRE"
		done
	}

	do_daemon $1 $2 "$TPWS" "$OPT $3"
}

do_tpws_socks() {
	# $1 : 1 - run, 0 - stop
	# $2 : daemon number
	# $3 : daemon args

	[ "$1" = "1" ] && prepare_user

	[ "$DISABLE_IPV4" = "1" ] && [ "$DISABLE_IPV6" = "1" ] && return 0

	local opt="$TPWS_OPT_BASE --socks"

	tpws_apply_socks_binds opt

	do_daemon $1 $2 "$TPWS" "$opt $3"
}

do_nfqws() {
	# $1 : 1 - run, 0 - stop
	# $2 : daemon number
	# $3 : daemon args

	[ "$1" = "1" ] && prepare_user
	do_daemon $1 $2 "$NFQWS" "$NFQWS_OPT_BASE $3"
}

filter_apply_port_target() {
	# $1 - var name of iptables filter
	local f
	if [ "$MODE_HTTP" = "1" ] && [ "$MODE_HTTPS" = "1" ]; then
		f="-m multiport --dports 80,443"
	elif [ "$MODE_HTTPS" = "1" ]; then
		f="--dport 443"
	elif [ "$MODE_HTTP" = "1" ]; then
		f="--dport 80"
	else
		echo WARNING !!! HTTP and HTTPS are both disabled
	fi
	eval $1="\"\$$1 $f\""
}

filter_apply_ipset_target() {
	# $1 - var name of ipv4 iptables filter
	# $2 - var name of ipv6 iptables filter
	if [ "$MODE_FILTER" = "ipset" ]; then
		eval $1="\"\$$1 -m set --match-set zapret dst\""
		eval $2="\"\$$2 -m set --match-set zapret6 dst\""
	fi
}

filter_apply_hostlist_target() {
	# $1 - var name of tpws or nfqws params
	[ "$MODE_FILTER" = "hostlist" ] && eval $1="\"\$$1 --hostlist=$HOSTLIST\""
}

tpws_apply_socks_binds() {
	local o

	[ "$DISABLE_IPV4" = "1" ] || o="--bind-addr=127.0.0.1"
	[ "$DISABLE_IPV6" = "1" ] || o="$o --bind-addr=::1"
	
	for lan in $IFACE_LAN; do
	    [ "$DISABLE_IPV4" = "1" ] || o="$o --bind-iface4=$lan $TPWS_WAIT"
	    [ "$DISABLE_IPV6" = "1" ] || o="$o --bind-iface6=$lan --bind-linklocal=unwanted $TPWS_WAIT_SOCKS6"
	done
	eval $1="\"\$$1 $o\""
}

create_ipset() {
	ebegin "Creating ipset"
	"$IPSET_CR" "$@"
	eend $?
}

zapret_do_firewall() {
	# $1 - 1 - add, 0 - del

	local first_packet_only="-m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:4"
	local desync="-m mark ! --mark $DESYNC_MARK/$DESYNC_MARK"
	local f4 f6
	local qn

	# always create ipsets. ip_exclude ipset is required
	[ "$1" != "1" ] || create_ipset no-update

	case "${MODE}" in
		tpws)
			if [ ! "$MODE_HTTP" = "1" ] && [ ! "$MODE_HTTPS" = "1" ]; then
				echo both http and https are disabled. not applying redirection.
			else
				filter_apply_port_target f4
				f6=$f4
				filter_apply_ipset_target f4 f6
				fw_tpws $1 "$f4" "$f6" $TPPORT
			fi
			;;
		nfqws)
			if [ ! "$MODE_HTTP" = "1" ] && [ ! "$MODE_HTTPS" = "1" ]; then
				echo both http and https are disabled. not applying redirection.
			else
				if [ "$MODE_HTTP_KEEPALIVE" != "1" ] && [ "$NFQWS_OPT_DESYNC_HTTP" = "$NFQWS_OPT_DESYNC_HTTPS" ]; then
					filter_apply_port_target f4
					f4="$f4 $first_packet_only"
					f6=$f4
					filter_apply_ipset_target f4 f6
					fw_nfqws_post $1 "$f4 $desync" "$f6 $desync" $QNUM
				else
					if [ "$MODE_HTTP" = "1" ]; then
						f4="--dport 80"
						[ "$MODE_HTTP_KEEPALIVE" = "1" ] || f4="$f4 $first_packet_only"
						f6=$f4
						filter_apply_ipset_target f4 f6
						fw_nfqws_post $1 "$f4 $desync" "$f6 $desync" $QNUM
					fi
					if [ "$MODE_HTTPS" = "1" ]; then
						f4="--dport 443 $first_packet_only"
						f6=$f4
						filter_apply_ipset_target f4 f6
						qn=$QNUM
						[ "$NFQWS_OPT_DESYNC_HTTP" = "$NFQWS_OPT_DESYNC_HTTPS" ] || qn=$(($QNUM+1))
						fw_nfqws_post $1 "$f4 $desync" "$f6 $desync" $qn
					fi
				fi
			fi
			;;
		custom)
	    		existf zapret_custom_firewall && zapret_custom_firewall $1
			;;
	esac
	if [ "$1" = 0 ]; then
		unprepare_tpws_fw
	fi
}

zapret_do_daemons() {
	# $1 - 1 - run, 0 - stop

	local opt

	case "${MODE}" in
		tpws)
			opt="--port=$TPPORT $TPWS_OPT"
			filter_apply_hostlist_target opt
			do_tpws $1 1 "$opt"
			;;
		tpws-socks)
			opt="--port=$TPPORT $TPWS_OPT"
			filter_apply_hostlist_target opt
			do_tpws_socks $1 1 "$opt"
			;;
		nfqws)
			opt="--qnum=$QNUM $NFQWS_OPT_DESYNC_HTTP"
			filter_apply_hostlist_target opt
			do_nfqws $1 1 "$opt"
			[ "$NFQWS_OPT_DESYNC_HTTP" = "$NFQWS_OPT_DESYNC_HTTPS" ] || {
				opt="--qnum=$(($QNUM+1)) $NFQWS_OPT_DESYNC_HTTPS"
				filter_apply_hostlist_target opt
				do_nfqws $1 2 "$opt"
			}
			;;
		custom)
	    		existf zapret_custom_daemons && zapret_custom_daemons $1
			;;
	esac
}

start() {
	zapret_do_daemons 1
	[ "$INIT_APPLY_FW" != "1" ] || zapret_do_firewall 1
}

stop() {
	zapret_do_daemons 0
	[ "$INIT_APPLY_FW" != "1" ] || zapret_do_firewall 0
}
