--- ./base/debug/stack_trace_unittest.cc.orig
+++ ./base/debug/stack_trace_unittest.cc
@@ -33,7 +33,7 @@
 typedef testing::Test StackTraceTest;
 #endif
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
 // StackTrace::OutputToStream() is not implemented under uclibc, nor AIX.
 // See https://crbug.com/706728
 
--- ./base/profiler/stack_sampler_posix.cc.orig
+++ ./base/profiler/stack_sampler_posix.cc
@@ -21,18 +21,7 @@
 }
 
 size_t StackSampler::GetStackBufferSize() {
-  size_t stack_size = PlatformThread::GetDefaultThreadStackSize();
-
-  pthread_attr_t attr;
-  if (stack_size == 0 && pthread_attr_init(&attr) == 0) {
-    if (pthread_attr_getstacksize(&attr, &stack_size) != 0)
-      stack_size = 0;
-    pthread_attr_destroy(&attr);
-  }
-
-  // Maximum limits under NPTL implementation.
-  constexpr size_t kDefaultStackLimit = 4 * (1 << 20);
-  return stack_size > 0 ? stack_size : kDefaultStackLimit;
+  return 0;
 }
 
 }  // namespace base
--- ./base/test/generate_fontconfig_caches.cc.orig
+++ ./base/test/generate_fontconfig_caches.cc
@@ -58,7 +58,7 @@
   FcFini();
 
   // Check existence of intended fontconfig cache file.
-  CHECK(base::PathExists(
-      fontconfig_caches.Append(base::StrCat({kCacheKey, "-le64.cache-7"}))));
+  //CHECK(base::PathExists(
+  //    fontconfig_caches.Append(base::StrCat({kCacheKey, "-le64.cache-7"}))));
   return 0;
 }
--- ./base/test/gmock_move_support.h.orig
+++ ./base/test/gmock_move_support.h
@@ -10,7 +10,7 @@
 
 // A similar action as testing::SaveArg, but it does an assignment with
 // std::move() instead of always performing a copy.
-template <size_t I = 0, typename T>
+template <std::size_t I = 0, typename T>
 auto MoveArg(T* out) {
   return [out](auto&&... args) {
     *out = std::move(std::get<I>(std::tie(args...)));
--- ./net/base/test_data_stream.cc.orig
+++ ./net/base/test_data_stream.cc
@@ -5,6 +5,7 @@
 #include "net/base/test_data_stream.h"
 
 #include <algorithm>
+#include <cstring>
 
 namespace net {
 
