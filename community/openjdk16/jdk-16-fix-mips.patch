--- jdk16u-jdk-16.0.2-ga/make/autoconf/buildjdk-spec.gmk.in.orig
+++ jdk16u-jdk-16.0.2-ga/make/autoconf/buildjdk-spec.gmk.in
@@ -55,34 +55,34 @@
 OPENJDK_BUILD_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@
 OPENJDK_BUILD_CPU_LEGACY_LIB := @OPENJDK_BUILD_CPU_LEGACY_LIB@
 OPENJDK_BUILD_LIBC := @OPENJDK_BUILD_LIBC@
-OPENJDK_TARGET_CPU := @OPENJDK_BUILD_CPU@
-OPENJDK_TARGET_CPU_ARCH := @OPENJDK_BUILD_CPU_ARCH@
-OPENJDK_TARGET_CPU_BITS := @OPENJDK_BUILD_CPU_BITS@
-OPENJDK_TARGET_CPU_ENDIAN := @OPENJDK_BUILD_CPU_ENDIAN@
-OPENJDK_TARGET_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@
-OPENJDK_TARGET_LIBC := @OPENJDK_BUILD_LIBC@
-OPENJDK_TARGET_OS_INCLUDE_SUBDIR := @OPENJDK_BUILD_OS_INCLUDE_SUBDIR@
+OPENJDK_TARGET_CPU := @OPENJDK_TARGET_CPU@
+OPENJDK_TARGET_CPU_ARCH := @OPENJDK_TARGET_CPU_ARCH@
+OPENJDK_TARGET_CPU_BITS := @OPENJDK_TARGET_CPU_BITS@
+OPENJDK_TARGET_CPU_ENDIAN := @OPENJDK_TARGET_CPU_ENDIAN@
+OPENJDK_TARGET_CPU_LEGACY := @OPENJDK_TARGET_CPU_LEGACY@
+OPENJDK_TARGET_LIBC := @OPENJDK_TARGET_LIBC@
+OPENJDK_TARGET_OS_INCLUDE_SUBDIR := @OPENJDK_TARGET_OS_INCLUDE_SUBDIR@
 
-HOTSPOT_TARGET_OS := @HOTSPOT_BUILD_OS@
-HOTSPOT_TARGET_OS_TYPE := @HOTSPOT_BUILD_OS_TYPE@
-HOTSPOT_TARGET_CPU := @HOTSPOT_BUILD_CPU@
-HOTSPOT_TARGET_CPU_ARCH := @HOTSPOT_BUILD_CPU_ARCH@
-HOTSPOT_TARGET_CPU_DEFINE := @HOTSPOT_BUILD_CPU_DEFINE@
-HOTSPOT_TARGET_LIBC := @HOTSPOT_BUILD_LIBC@
+HOTSPOT_TARGET_OS := @HOTSPOT_TARGET_OS@
+HOTSPOT_TARGET_OS_TYPE := @HOTSPOT_TARGET_OS_TYPE@
+HOTSPOT_TARGET_CPU := @HOTSPOT_TARGET_CPU@
+HOTSPOT_TARGET_CPU_ARCH := @HOTSPOT_TARGET_CPU_ARCH@
+HOTSPOT_TARGET_CPU_DEFINE := @HOTSPOT_TARGET_CPU_DEFINE@
+HOTSPOT_TARGET_LIBC := @HOTSPOT_TARGET_LIBC@
 
-CFLAGS_JDKLIB := @OPENJDK_BUILD_CFLAGS_JDKLIB@
-CXXFLAGS_JDKLIB := @OPENJDK_BUILD_CXXFLAGS_JDKLIB@
-LDFLAGS_JDKLIB := @OPENJDK_BUILD_LDFLAGS_JDKLIB@
-CFLAGS_JDKEXE := @OPENJDK_BUILD_CFLAGS_JDKEXE@
-CXXFLAGS_JDKEXE := @OPENJDK_BUILD_CXXFLAGS_JDKEXE@
-LDFLAGS_JDKEXE := @OPENJDK_BUILD_LDFLAGS_JDKEXE@
+CFLAGS_JDKLIB := @CFLAGS_JDKLIB@
+CXXFLAGS_JDKLIB := @CXXFLAGS_JDKLIB@
+LDFLAGS_JDKLIB := @LDFLAGS_JDKLIB@
+CFLAGS_JDKEXE := @CFLAGS_JDKEXE@
+CXXFLAGS_JDKEXE := @CXXFLAGS_JDKEXE@
+LDFLAGS_JDKEXE := @LDFLAGS_JDKEXE@
 
-JVM_CFLAGS := @OPENJDK_BUILD_JVM_CFLAGS@
-JVM_LDFLAGS := @OPENJDK_BUILD_JVM_LDFLAGS@
-JVM_ASFLAGS := @OPENJDK_BUILD_JVM_ASFLAGS@
-JVM_LIBS := @OPENJDK_BUILD_JVM_LIBS@
+JVM_CFLAGS := @JVM_CFLAGS@
+JVM_LDFLAGS := @JVM_LDFLAGS@
+JVM_ASFLAGS := @JVM_ASFLAGS@
+JVM_LIBS := @JVM_LIBS@
 
-FDLIBM_CFLAGS := @OPENJDK_BUILD_FDLIBM_CFLAGS@
+FDLIBM_CFLAGS := @FDLIBM_CFLAGS@
 
 INTERIM_LANGTOOLS_ARGS := $(subst $(OUTPUTDIR),$(BUILDJDK_OUTPUTDIR),$(INTERIM_LANGTOOLS_ARGS))
 
@@ -94,9 +94,9 @@
 # Save speed and disk space by not enabling debug symbols for the buildjdk
 ENABLE_DEBUG_SYMBOLS := false
 
-JVM_VARIANTS := server
-JVM_VARIANT_MAIN := server
-JVM_FEATURES_server := cds compiler1 compiler2 g1gc serialgc
+JVM_VARIANTS := @JVM_VARIANTS@
+JVM_VARIANT_MAIN := @JVM_VARIANT_MAIN@
+JVM_FEATURES_zero := @JVM_FEATURES_zero@
 
 # Some users still set EXTRA_*FLAGS on the make command line. Must
 # make sure to override that when building buildjdk.
--- a/src/hotspot/cpu/zero/zeroInterpreter_zero.cpp
+++ b/src/hotspot/cpu/zero/zeroInterpreter_zero.cpp
@@ -414,7 +414,7 @@ int ZeroInterpreter::native_entry(Method
   ThreadStateTransition::transition_from_java(thread, _thread_in_native);
 
   // Make the call
-  intptr_t result[4 - LogBytesPerWord];
+  intptr_t result[4 - LogBytesPerWord] __attribute__((__aligned__(__alignof__(double))));
   ffi_call(handler->cif(), (void (*)()) function, result, arguments);
 
   // Change the thread state back to _thread_in_Java and ensure it
# DP: Untested patch suggested to fix #983878

--- a/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
+++ b/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
@@ -152,7 +152,7 @@ static fdopendir_func* my_fdopendir_func
 /**
  * fstatat missing from glibc on Linux.
  */
-#if defined(__linux__) && (defined(__i386) || defined(__arm__))
+#if defined(__linux__) && (defined(__i386) || defined(__arm__) || (defined(__mips__) && !defined(__mips64)))
 #define FSTATAT64_SYSCALL_AVAILABLE
 static int fstatat64_wrapper(int dfd, const char *path,
                              struct stat64 *statbuf, int flag)
