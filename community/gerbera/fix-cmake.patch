From: Mike Crute <mike@crute.us>
Date: Wed, 11 Aug 2021 21:37:42 +0000
Subject: Fix CMake library search

CMake does not correctly find the libraries based on the names. If builds a
list of correct library regexes but those regexes don't seem to ever match
despite the fact that the libraries exist on the system.

The patterns look like: /usr/lib/(lib)matroska(\.so|\.a)
The library exists at: /usr/lib/libmatroska.so

This seems like a hack but I don't see any flags that do the correct thing
within CMake so this works.

---

--- a/cmake/Findpugixml.cmake
+++ b/cmake/Findpugixml.cmake
@@ -13,7 +13,7 @@
 pkg_check_modules(PC_PUGIXML QUIET libpugixml)
 find_path(PUGIXML_INCLUDE_DIR pugixml.hpp
     HINTS ${PC_PUGIXML_INCLUDEDIR} ${PC_PUGIXML_INCLUDE_DIRS})
-FIND_LIBRARY(PUGIXML_LIBRARY pugixml
+FIND_LIBRARY(PUGIXML_LIBRARY libpugixml.so
     HINTS ${PC_PUGIXML_LIBDIR} ${PC_PUGIXML_LIBRARY_DIRS})
 
 FIND_PACKAGE_HANDLE_STANDARD_ARGS(pugixml
--- a/cmake/FindSQLite3.cmake
+++ b/cmake/FindSQLite3.cmake
@@ -39,7 +39,7 @@
 mark_as_advanced(SQLite3_INCLUDE_DIR)
 
 # Look for the necessary library
-find_library(SQLite3_LIBRARY NAMES sqlite3 sqlite)
+find_library(SQLite3_LIBRARY NAMES sqlite3 sqlite libsqlite3.so)
 mark_as_advanced(SQLite3_LIBRARY)
 
 # Extract version information from the header file
--- a/cmake/Findduktape.cmake
+++ b/cmake/Findduktape.cmake
@@ -15,7 +15,7 @@
     PATH_SUFFIXES duktape)
 
 find_library(DUKTAPE_LIBRARY
-    NAMES duktape libduktape
+    NAMES duktape libduktape libduktape.so
     HINTS ${PC_DUK_LIBDIR} ${PC_DUK_LIBRARY_DIRS})
 
 include(FindPackageHandleStandardArgs)
--- a/cmake/FindLibMagic.cmake
+++ b/cmake/FindLibMagic.cmake
@@ -6,7 +6,7 @@
 
 find_path(MAGIC_INCLUDE_DIR magic.h
     HINTS ${PC_MAGIC_INCLUDEDIR} ${PC_MAGIC_INCLUDE_DIRS})
-find_library(MAGIC_LIBRARY NAMES magic
+find_library(MAGIC_LIBRARY NAMES magic libmagic.so
     HINTS ${PC_MAGIC_LIBDIR} ${PC_MAGIC_LIBRARY_DIRS})
 
 # handle the QUIETLY and REQUIRED arguments and set MAGIC_FOUND to TRUE
--- a/cmake/FindFFMpegThumbnailer.cmake
+++ b/cmake/FindFFMpegThumbnailer.cmake
@@ -18,7 +18,7 @@
     PATHS ENV FFMPEGTHUMBNAILER_ROOT_DIR)
 
 FIND_LIBRARY(FFMPEGTHUMBNAILER_LIBRARIES
-    NAMES libffmpegthumbnailer ffmpegthumbnailer
+    NAMES libffmpegthumbnailer ffmpegthumbnailer libffmpegthumbnailer.so
     HINTS ${PC_FFTHUMB_LIBDIR} ${PC_FFTHUMB_LIBRARY_DIRS})
 
 INCLUDE(FindPackageHandleStandardArgs)
--- a/cmake/FindEXIF.cmake
+++ b/cmake/FindEXIF.cmake
@@ -51,7 +51,7 @@
     PATH_SUFFIXES "include")
 
 find_library(EXIF_LIBRARY
-    NAMES "exif"
+    NAMES "exif" libexif.so
     HINTS ${EXIF_ROOT_DIR}
     PATHS ENV EXIF_ROOT_DIR
     PATH_SUFFIXES "lib")
--- a/cmake/FindEXIV2.cmake
+++ b/cmake/FindEXIV2.cmake
@@ -51,7 +51,7 @@
     PATH_SUFFIXES "include")
 
 find_library(EXIV2_LIBRARY
-    NAMES "exiv2"
+    NAMES "exiv2" libexiv2.so
     HINTS ${EXIV2_ROOT_DIR}
     PATHS ENV EXIV2_ROOT_DIR
     PATH_SUFFIXES "lib")
--- a/cmake/FindEBML.cmake
+++ b/cmake/FindEBML.cmake
@@ -16,6 +16,7 @@
         HINTS ${PC_EBML_INCLUDEDIR}
         PATH_SUFFIXES ebml)
 FIND_LIBRARY(EBML_LIBRARY ebml
+        NAMES libebml.so
         HINTS ${PC_EBML_LIBDIR})
 
 find_package_handle_standard_args(EBML DEFAULT_MSG
--- a/cmake/FindMatroska.cmake
+++ b/cmake/FindMatroska.cmake
@@ -16,6 +16,7 @@
         HINTS ${PC_MAT_INCLUDEDIR}
         PATH_SUFFIXES matroska)
 find_library(Matroska_LIBRARY matroska
+        NAMES libmatroska.so
         HINTS ${PC_MAT_LIBDIR})
 
 find_package_handle_standard_args(Matroska DEFAULT_MSG
--- a/cmake/FindGMock.cmake
+++ b/cmake/FindGMock.cmake
@@ -107,15 +107,15 @@
 if(MSVC AND GMOCK_MSVC_SEARCH STREQUAL "MD")
     # The provided /MD project files for Google Mock add -md suffixes to the
     # library names.
-    _gmock_find_library(GMOCK_LIBRARY            gmock-md  gmock)
-    _gmock_find_library(GMOCK_LIBRARY_DEBUG      gmock-mdd gmockd)
-    _gmock_find_library(GMOCK_MAIN_LIBRARY       gmock_main-md  gmock_main)
-    _gmock_find_library(GMOCK_MAIN_LIBRARY_DEBUG gmock_main-mdd gmock_maind)
+    _gmock_find_library(GMOCK_LIBRARY            gmock-md  libgmock.so)
+    _gmock_find_library(GMOCK_LIBRARY_DEBUG      gmock-mdd libgmockd.so)
+    _gmock_find_library(GMOCK_MAIN_LIBRARY       gmock_main-md  libgmock_main.so)
+    _gmock_find_library(GMOCK_MAIN_LIBRARY_DEBUG gmock_main-mdd libgmock_maind.so)
 else()
-    _gmock_find_library(GMOCK_LIBRARY            gmock)
-    _gmock_find_library(GMOCK_LIBRARY_DEBUG      gmockd)
-    _gmock_find_library(GMOCK_MAIN_LIBRARY       gmock_main)
-    _gmock_find_library(GMOCK_MAIN_LIBRARY_DEBUG gmock_maind)
+    _gmock_find_library(GMOCK_LIBRARY            libgmock.so)
+    _gmock_find_library(GMOCK_LIBRARY_DEBUG      libgmockd.so)
+    _gmock_find_library(GMOCK_MAIN_LIBRARY       libgmock_main.so)
+    _gmock_find_library(GMOCK_MAIN_LIBRARY_DEBUG libgmock_maind.so)
 endif()
 
 FIND_PACKAGE_HANDLE_STANDARD_ARGS(GMock DEFAULT_MSG GMOCK_LIBRARY GMOCK_INCLUDE_DIR GMOCK_MAIN_LIBRARY)
--- a/cmake/Findlibuuid.cmake
+++ b/cmake/Findlibuuid.cmake
@@ -34,7 +34,7 @@
 	pkg_search_module(PC_UUID libuuid QUIET)
 	if(NOT PC_UUID_FOUND)
 		FIND_PATH(libuuid_INCLUDE_DIRS uuid/uuid.h)
-		FIND_LIBRARY(libuuid_LIBRARIES uuid)
+		FIND_LIBRARY(libuuid_LIBRARIES uuid NAMES libuuid.so)
 
 		if(libuuid_INCLUDE_DIRS)
 			message(STATUS "Looking for libuuid - found")
--- a/cmake/FindUPNP.cmake
+++ b/cmake/FindUPNP.cmake
@@ -19,11 +19,11 @@
 endif()
 
 find_library(UPNP_UPNP_LIBRARY
-    NAMES libupnp upnp
+    NAMES libupnp upnp libupnp.so
     HINTS ${PC_UPNP_LIBDIR} ${PC_UPNP_LIBRARY_DIRS})
 
 find_library(UPNP_IXML_LIBRARY
-    NAMES libixml ixml
+    NAMES libixml ixml libixml.so
     HINTS ${PC_UPNP_LIBDIR} ${PC_UPNP_LIBRARY_DIRS})
 
 # Restore
