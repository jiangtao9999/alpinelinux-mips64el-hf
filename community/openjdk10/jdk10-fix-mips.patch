diff -Nrui jdk10u-45b1d041a4ef-orig/src/hotspot/cpu/zero/cppInterpreter_zero.cpp jdk10u-45b1d041a4ef/src/hotspot/cpu/zero/cppInterpreter_zero.cpp
--- jdk10u-45b1d041a4ef-orig/src/hotspot/cpu/zero/cppInterpreter_zero.cpp	2020-02-12 10:53:34.346000611 +0800
+++ jdk10u-45b1d041a4ef/src/hotspot/cpu/zero/cppInterpreter_zero.cpp	2020-02-12 10:54:41.618016995 +0800
@@ -366,7 +366,7 @@
   ThreadStateTransition::transition_from_java(thread, _thread_in_native);
 
   // Make the call
-  intptr_t result[4 - LogBytesPerWord];
+  intptr_t result[4 - LogBytesPerWord] __attribute__((__aligned__(__alignof__(double))));
   ffi_call(handler->cif(), (void (*)()) function, result, arguments);
 
   // Change the thread state back to _thread_in_Java.
diff -Nrui jdk10u-45b1d041a4ef-orig/src/hotspot/os/linux/os_linux.cpp jdk10u-45b1d041a4ef/src/hotspot/os/linux/os_linux.cpp
--- jdk10u-45b1d041a4ef-orig/src/hotspot/os/linux/os_linux.cpp	2020-02-12 10:53:34.353832232 +0800
+++ jdk10u-45b1d041a4ef/src/hotspot/os/linux/os_linux.cpp	2020-02-12 10:54:41.625843747 +0800
@@ -4411,14 +4411,16 @@
 
 // For signal-chaining
 struct sigaction sigact[NSIG];
-uint64_t sigs = 0;
-#if (64 < NSIG-1)
-#error "Not all signals can be encoded in sigs. Adapt its type!"
-#endif
+sigset_t sigs;
 bool os::Linux::libjsig_is_loaded = false;
 typedef struct sigaction *(*get_signal_t)(int);
 get_signal_t os::Linux::get_signal_action = NULL;
 
+static __attribute__((constructor)) void sigs_init()
+{
+    sigemptyset(&sigs);
+}
+
 struct sigaction* os::Linux::get_chained_signal_action(int sig) {
   struct sigaction *actp = NULL;
 
@@ -4493,7 +4495,7 @@
 }
 
 struct sigaction* os::Linux::get_preinstalled_handler(int sig) {
-  if ((((uint64_t)1 << (sig-1)) & sigs) != 0) {
+  if (sigismember(&sigs, sig)) {
     return &sigact[sig];
   }
   return NULL;
@@ -4502,7 +4504,7 @@
 void os::Linux::save_preinstalled_handler(int sig, struct sigaction& oldAct) {
   assert(sig > 0 && sig < NSIG, "vm signal out of expected range");
   sigact[sig] = oldAct;
-  sigs |= (uint64_t)1 << (sig-1);
+  sigaddset(&sigs, sig);
 }
 
 // for diagnostic
diff -Nrui jdk10u-45b1d041a4ef-orig/src/java.base/linux/native/libjsig/jsig.c jdk10u-45b1d041a4ef/src/java.base/linux/native/libjsig/jsig.c
--- jdk10u-45b1d041a4ef-orig/src/java.base/linux/native/libjsig/jsig.c	2020-02-12 10:53:34.553538556 +0800
+++ jdk10u-45b1d041a4ef/src/java.base/linux/native/libjsig/jsig.c	2020-02-12 10:54:41.621930371 +0800
@@ -41,13 +41,8 @@
 #define true 1
 #define false 0
 
-#define MASK(sig) ((uint64_t)1 << (sig-1))  // 0 is not a signal.
-// Check whether all signals fit into jvmsigs. -1 as MASK shifts by -1.
-#if (64 < NSIG-1)
-#error "Not all signals can be encoded in jvmsigs. Adapt its type!"
-#endif
 static struct sigaction sact[NSIG]; /* saved signal handlers */
-static uint64_t jvmsigs = 0; /* signals used by jvm */
+static sigset_t jvmsigs; /* signals used by jvm */
 
 /* used to synchronize the installation of signal handlers */
 static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
@@ -65,6 +60,11 @@
 static bool jvm_signal_installing = false;
 static bool jvm_signal_installed = false;
 
+static __attribute__((constructor)) void jvmsigs_init(void)
+{
+    sigemptyset(&jvmsigs);
+}
+
 static void signal_lock() {
   pthread_mutex_lock(&mutex);
   /* When the jvm is installing its set of signal handlers, threads
@@ -110,7 +110,7 @@
 
   signal_lock();
 
-  sigused = (sig < NSIG) && ((MASK(sig) & jvmsigs) != 0);
+  sigused = (sig < NSIG) && sigismember(&jvmsigs, sig);
   if (jvm_signal_installed && sigused) {
     /* jvm has installed its signal handler for this signal. */
     /* Save the handler. Don't really install it. */
@@ -127,7 +127,7 @@
     save_signal_handler(sig, oldhandler);
 
     /* Record the signals used by jvm */
-    jvmsigs |= MASK(sig);
+    sigaddset(&jvmsigs, sig);
 
     signal_unlock();
     return oldhandler;
@@ -168,7 +168,7 @@
 
   signal_lock();
 
-  sigused = (sig < NSIG) && ((MASK(sig) & jvmsigs) != 0);
+  sigused = (sig < NSIG) && sigismember(&jvmsigs, sig);
   if (jvm_signal_installed && sigused) {
     /* jvm has installed its signal handler for this signal. */
     /* Save the handler. Don't really install it. */
@@ -191,7 +191,7 @@
     }
 
     /* Record the signals used by jvm */
-    jvmsigs |= MASK(sig);
+    sigaddset(&jvmsigs, sig);
 
     signal_unlock();
     return res;
@@ -223,7 +223,7 @@
 
 struct sigaction *JVM_get_signal_action(int sig) {
   /* Does race condition make sense here? */
-  if ((MASK(sig) & jvmsigs) != 0) {
+  if (sigismember(&jvmsigs, sig)) {
     return &sact[sig];
   }
   return NULL;
--- jdk10u-jdk-10.0.2-13/make/autoconf/buildjdk-spec.gmk.in.orig
+++ jdk10u-jdk-10.0.2-13/make/autoconf/buildjdk-spec.gmk.in
@@ -50,29 +50,29 @@
 
 OPENJDK_BUILD_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@
 OPENJDK_BUILD_CPU_LEGACY_LIB := @OPENJDK_BUILD_CPU_LEGACY_LIB@
-OPENJDK_TARGET_CPU := @OPENJDK_BUILD_CPU@
-OPENJDK_TARGET_CPU_ARCH := @OPENJDK_BUILD_CPU_ARCH@
-OPENJDK_TARGET_CPU_BITS := @OPENJDK_BUILD_CPU_BITS@
-OPENJDK_TARGET_CPU_ENDIAN := @OPENJDK_BUILD_CPU_ENDIAN@
-OPENJDK_TARGET_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@
+OPENJDK_TARGET_CPU := @OPENJDK_TARGET_CPU@
+OPENJDK_TARGET_CPU_ARCH := @OPENJDK_TARGET_CPU_ARCH@
+OPENJDK_TARGET_CPU_BITS := @OPENJDK_TARGET_CPU_BITS@
+OPENJDK_TARGET_CPU_ENDIAN := @OPENJDK_TARGET_CPU_ENDIAN@
+OPENJDK_TARGET_CPU_LEGACY := @OPENJDK_TARGET_CPU_LEGACY@
 
-HOTSPOT_TARGET_OS := @HOTSPOT_BUILD_OS@
-HOTSPOT_TARGET_OS_TYPE := @HOTSPOT_BUILD_OS_TYPE@
-HOTSPOT_TARGET_CPU := @HOTSPOT_BUILD_CPU@
-HOTSPOT_TARGET_CPU_ARCH := @HOTSPOT_BUILD_CPU_ARCH@
-HOTSPOT_TARGET_CPU_DEFINE := @HOTSPOT_BUILD_CPU_DEFINE@
+HOTSPOT_TARGET_OS := @HOTSPOT_TARGET_OS@
+HOTSPOT_TARGET_OS_TYPE := @HOTSPOT_TARGET_OS_TYPE@
+HOTSPOT_TARGET_CPU := @HOTSPOT_TARGET_CPU@
+HOTSPOT_TARGET_CPU_ARCH := @HOTSPOT_TARGET_CPU_ARCH@
+HOTSPOT_TARGET_CPU_DEFINE := @HOTSPOT_TARGET_CPU_DEFINE@
 
-CFLAGS_JDKLIB := @OPENJDK_BUILD_CFLAGS_JDKLIB@
-CXXFLAGS_JDKLIB := @OPENJDK_BUILD_CXXFLAGS_JDKLIB@
-LDFLAGS_JDKLIB := @OPENJDK_BUILD_LDFLAGS_JDKLIB@
-CFLAGS_JDKEXE := @OPENJDK_BUILD_CFLAGS_JDKEXE@
-CXXFLAGS_JDKEXE := @OPENJDK_BUILD_CXXFLAGS_JDKEXE@
-LDFLAGS_JDKEXE := @OPENJDK_BUILD_LDFLAGS_JDKEXE@
+CFLAGS_JDKLIB := @CFLAGS_JDKLIB@
+CXXFLAGS_JDKLIB := @CXXFLAGS_JDKLIB@
+LDFLAGS_JDKLIB := @LDFLAGS_JDKLIB@
+CFLAGS_JDKEXE := @CFLAGS_JDKEXE@
+CXXFLAGS_JDKEXE := @CXXFLAGS_JDKEXE@
+LDFLAGS_JDKEXE := @LDFLAGS_JDKEXE@
 
-JVM_CFLAGS := @OPENJDK_BUILD_JVM_CFLAGS@
-JVM_LDFLAGS := @OPENJDK_BUILD_JVM_LDFLAGS@
-JVM_ASFLAGS := @OPENJDK_BUILD_JVM_ASFLAGS@
-JVM_LIBS := @OPENJDK_BUILD_JVM_LIBS@
+JVM_CFLAGS := @JVM_CFLAGS@
+JVM_LDFLAGS := @JVM_LDFLAGS@
+JVM_ASFLAGS := @JVM_ASFLAGS@
+JVM_LIBS := @JVM_LIBS@
 
 # The compiler for the build platform is likely not warning compatible with the official
 # compiler.
@@ -85,8 +85,8 @@
 # Control wether Hotspot builds gtest tests
 BUILD_GTEST := false
 
-JVM_VARIANTS := server
-JVM_VARIANT_MAIN := server
+JVM_VARIANTS := @JVM_VARIANTS@
+JVM_VARIANT_MAIN := @JVM_VARIANT_MAIN@
 
 # Some users still set EXTRA_*FLAGS on the make command line. Must
 # make sure to override that when building buildjdk.
