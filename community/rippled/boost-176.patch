diff --git a/src/ripple/app/misc/NetworkOPs.cpp b/src/ripple/app/misc/NetworkOPs.cpp
index bc8bfda..c131e1e 100644
--- a/src/ripple/app/misc/NetworkOPs.cpp
+++ b/src/ripple/app/misc/NetworkOPs.cpp
@@ -2586,7 +2586,7 @@ NetworkOPsImp::getServerInfo(bool human, bool admin, bool counters)
 
     info[jss::server_state] = strOperatingMode(admin);
 
-    info[jss::time] = to_string(date::floor<std::chrono::microseconds>(
+    info[jss::time] = to_string(std::chrono::floor<std::chrono::microseconds>(
         std::chrono::system_clock::now()));
 
     if (needNetworkLedger_)
diff --git a/src/ripple/app/reporting/ETLSource.h b/src/ripple/app/reporting/ETLSource.h
index 83d6b47..8cc63c2 100644
--- a/src/ripple/app/reporting/ETLSource.h
+++ b/src/ripple/app/reporting/ETLSource.h
@@ -238,7 +238,7 @@ public:
         auto last = getLastMsgTime();
         if (last.time_since_epoch().count() != 0)
             result["last_message_arrival_time"] =
-                to_string(date::floor<std::chrono::microseconds>(last));
+						    to_string(std::chrono::floor<std::chrono::microseconds>(last));
         return result;
     }
 
diff --git a/src/ripple/app/reporting/ReportingETL.h b/src/ripple/app/reporting/ReportingETL.h
index 0452b41..0d70cab 100644
--- a/src/ripple/app/reporting/ReportingETL.h
+++ b/src/ripple/app/reporting/ReportingETL.h
@@ -315,8 +315,9 @@ public:
         result["is_writer"] = writing_.load();
         auto last = getLastPublish();
         if (last.time_since_epoch().count() != 0)
-            result["last_publish_time"] = to_string(
-                date::floor<std::chrono::microseconds>(getLastPublish()));
+            result["last_publish_time"] =
+                to_string(std::chrono::floor<std::chrono::microseconds>(
+                    getLastPublish()));			
         return result;
     }
 
diff --git a/src/ripple/beast/net/IPAddress.h b/src/ripple/beast/net/IPAddress.h
index 1dd71f2..d8820ec 100644
--- a/src/ripple/beast/net/IPAddress.h
+++ b/src/ripple/beast/net/IPAddress.h
@@ -100,20 +100,6 @@ hash_append(Hasher& h, beast::IP::Address const& addr) noexcept
 }
 }  // namespace beast
 
-namespace std {
-template <>
-struct hash<beast::IP::Address>
-{
-    explicit hash() = default;
-
-    std::size_t
-    operator()(beast::IP::Address const& addr) const
-    {
-        return beast::uhash<>{}(addr);
-    }
-};
-}  // namespace std
-
 namespace boost {
 template <>
 struct hash<::beast::IP::Address>
diff --git a/src/test/unit_test/multi_runner.cpp b/src/test/unit_test/multi_runner.cpp
index fae5538..6659301 100644
--- a/src/test/unit_test/multi_runner.cpp
+++ b/src/test/unit_test/multi_runner.cpp
@@ -27,6 +27,7 @@
 #include <iomanip>
 #include <iostream>
 #include <sstream>
+#include <vector>
 
 namespace ripple {
 namespace test {
